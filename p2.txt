<!DOCTYPE html>
<html>
  <head>
    <base target="_top">
    <style>
      * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
      }
      
      body {
        font-family: 'Google Sans', 'Roboto', Arial, sans-serif;
        font-size: 14px;
        padding: 15px;
        background: #f8f9fa;
      }
      
      .header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 20px;
        border-radius: 8px;
        margin-bottom: 20px;
        text-align: center;
      }
      
      .header h1 {
        font-size: 20px;
        margin-bottom: 5px;
      }
      
      .header p {
        font-size: 12px;
        opacity: 0.9;
      }
      
      .section {
        background: white;
        border-radius: 8px;
        padding: 15px;
        margin-bottom: 15px;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
      }
      
      .section-title {
        font-size: 12px;
        font-weight: bold;
        color: #5f6368;
        text-transform: uppercase;
        margin-bottom: 10px;
        padding-bottom: 5px;
        border-bottom: 1px solid #e0e0e0;
      }
      
      .btn {
        width: 100%;
        padding: 10px;
        margin-bottom: 8px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 14px;
        font-weight: 500;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
      }
      
      .btn:hover:not(:disabled) {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
      }
      
      .btn:disabled {
        opacity: 0.5;
        cursor: not-allowed;
      }
      
      .btn-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
      }
      
      .btn-success {
        background: linear-gradient(135deg, #84fab0 0%, #8fd3f4 100%);
        color: #1a1a1a;
      }
      
      .btn-info {
        background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);
        color: #1a1a1a;
      }
      
      .btn-warning {
        background: linear-gradient(135deg, #f6d365 0%, #fda085 100%);
        color: #1a1a1a;
      }
      
      .input-group {
        margin-bottom: 10px;
      }
      
      .input-group label {
        display: block;
        margin-bottom: 5px;
        font-size: 12px;
        color: #5f6368;
      }
      
      .input-group input, .input-group select {
        width: 100%;
        padding: 8px;
        border: 1px solid #dadce0;
        border-radius: 4px;
        font-size: 14px;
      }
      
      .input-group input:focus, .input-group select:focus {
        outline: none;
        border-color: #667eea;
        box-shadow: 0 0 0 2px rgba(102, 126, 234, 0.1);
      }
      
      .thumbnail-grid {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 10px;
        margin-top: 10px;
        max-height: 250px;
        overflow-y: auto;
      }
      
      .thumbnail-container {
        position: relative;
        width: 100%;
        aspect-ratio: 1;
        cursor: pointer;
        border-radius: 4px;
        overflow: hidden;
        border: 2px solid transparent;
        transition: all 0.2s;
      }
      
      .thumbnail-container:hover {
        transform: scale(1.05);
        border-color: #667eea;
        box-shadow: 0 2px 8px rgba(0,0,0,0.2);
      }
      
      .thumbnail {
        width: 100%;
        height: 100%;
        object-fit: cover;
      }
      
      .thumbnail-overlay {
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        background: linear-gradient(to top, rgba(0,0,0,0.7), transparent);
        color: white;
        padding: 5px;
        font-size: 10px;
        opacity: 0;
        transition: opacity 0.2s;
      }
      
      .thumbnail-container:hover .thumbnail-overlay {
        opacity: 1;
      }
      
      .status {
        padding: 10px;
        border-radius: 4px;
        margin-bottom: 10px;
        display: none;
        font-size: 13px;
      }
      
      .status.success {
        background: #e8f5e9;
        color: #2e7d32;
        border-left: 4px solid #4caf50;
      }
      
      .status.error {
        background: #ffebee;
        color: #c62828;
        border-left: 4px solid #f44336;
      }
      
      .status.info {
        background: #e3f2fd;
        color: #1565c0;
        border-left: 4px solid #2196f3;
      }
      
      .spinner {
        display: none;
        width: 20px;
        height: 20px;
        border: 3px solid rgba(0,0,0,0.1);
        border-radius: 50%;
        border-top-color: #667eea;
        animation: spin 1s ease-in-out infinite;
      }
      
      @keyframes spin {
        to { transform: rotate(360deg); }
      }
      
      .text-center { text-align: center; }
      .mt-10 { margin-top: 10px; }
      .hidden { display: none; }
      
      .empty-state {
        text-align: center;
        padding: 30px 20px;
        color: #999;
      }
      
      .empty-state-icon {
        font-size: 48px;
        margin-bottom: 10px;
      }
    </style>
  </head>
  
  <body>
    <!-- Header -->
    <div class="header">
      <h1>üì¶ Inventory Control Panel</h1>
      <p>Manage your storage system</p>
    </div>
    
    <!-- Status Message -->
    <div id="statusMessage" class="status"></div>
    
    <!-- Quick Actions Section -->
    <div class="section">
      <div class="section-title">Quick Actions</div>
      <button class="btn btn-primary" onclick="openForm()">
        <span>üìù</span> Open Inventory Form
      </button>
      <button class="btn btn-success" onclick="refreshData()">
        <span>üîÑ</span> Refresh Data
      </button>
    </div>
    
    <!-- Box Reports Section -->
    <div class="section">
      <div class="section-title">Box Reports</div>
      
      <div class="input-group">
        <label for="boxNumber">Box Number:</label>
        <input type="text" id="boxNumber" placeholder="e.g., B001" />
      </div>

      <div class="input-group">
        <label for="emailAddress">Email Address (optional):</label>
        <input type="email" id="emailAddress" placeholder="Leave blank for your email" />
      </div>

      <button class="btn btn-info" onclick="generateBoxReport()">
        <span>üìä</span> Generate Box Report
        <span id="reportSpinner" class="spinner"></span>
      </button>

      <button class="btn btn-warning" onclick="emailSummary()">
        <span>üìß</span> Email Summary
        <span id="emailSpinner" class="spinner"></span>
      </button>
    </div>
    
    <!-- Bulk Operations Section -->
    <div class="section">
      <div class="section-title">Bulk Operations</div>
      
      <button class="btn btn-success" onclick="generateAllReports()">
        <span>üìö</span> Generate All Box Reports
      </button>
    </div>
    
    <!-- Recent Images Section -->
    <div class="section">
      <div class="section-title">Recent Item Images</div>
      <div id="thumbnailGrid" class="thumbnail-grid">
        <div class="empty-state">
          <div class="empty-state-icon">üì∏</div>
          <div>Loading images...</div>
        </div>
      </div>
      <button class="btn btn-info mt-10" onclick="loadThumbnails()">
        <span>üîÑ</span> Refresh Images
      </button>
    </div>
    
    <!-- Footer -->
    <div class="text-center mt-10" style="color: #999; font-size: 11px;">
      Version 1.0 | Last updated: <span id="lastUpdate">Never</span>
    </div>
    
    <!-- JavaScript -->
    <script>
      // Initialize when sidebar loads
      document.addEventListener('DOMContentLoaded', function() {
        loadThumbnails();
        updateLastRefresh();
      });
      
      // Show status message
      function showStatus(message, type) {
        type = type || 'info';
        const statusEl = document.getElementById('statusMessage');
        statusEl.textContent = message;
        statusEl.className = 'status ' + type;
        statusEl.style.display = 'block';
        
        setTimeout(function() {
          statusEl.style.display = 'none';
        }, 5000);
      }
      
      // Show/hide spinner
      function toggleSpinner(spinnerId, show) {
        const spinner = document.getElementById(spinnerId);
        if (spinner) {
          spinner.style.display = show ? 'inline-block' : 'none';
        }
      }
      
      // FIXED: Open form function using getFormUrl()
      function openForm() {
        showStatus('Opening form in new tab...', 'info');
        
        google.script.run
          .withSuccessHandler(function(formUrl) {
            // Open the form in a new window
            const newWindow = window.open(formUrl, '_blank');
            
            if (newWindow) {
              showStatus('Form opened! Check your browser tabs.', 'success');
            } else {
              // If popup was blocked, show clickable link
              showStatus('Popup blocked. Please allow popups or click below:', 'error');
              
              const linkHtml = '<div style="margin-top: 10px; padding: 10px; background: #f0f0f0; border-radius: 4px;"><a href="' + formUrl + '" target="_blank" style="color: #667eea; text-decoration: none; font-weight: bold;">üìù Click here to open the form</a></div>';
              
              const statusEl = document.getElementById('statusMessage');
              statusEl.innerHTML = statusEl.innerHTML + linkHtml;
              statusEl.style.display = 'block';
            }
          })
          .withFailureHandler(function(error) {
            console.error('Error getting form URL:', error);
            showStatus('Error opening form: ' + error.message, 'error');
          })
          .getFormUrl();
      }
      
      // Generate box report
      function generateBoxReport() {
        const boxNumber = document.getElementById('boxNumber').value.trim();
        
        if (!boxNumber) {
          showStatus('Please enter a box number', 'error');
          return;
        }
        
        toggleSpinner('reportSpinner', true);
        showStatus('Generating report for box ' + boxNumber + '...', 'info');
        
        google.script.run
          .withSuccessHandler(function(result) {
            toggleSpinner('reportSpinner', false);
            showStatus('Report generated successfully!', 'success');
            
            // Open the report in a new tab
            window.open(result.documentUrl, '_blank');
          })
          .withFailureHandler(function(error) {
            toggleSpinner('reportSpinner', false);
            showStatus('Failed to generate report: ' + error.message, 'error');
          })
          .generateSingleBoxReport(boxNumber);
      }
      
      // Email summary
      function emailSummary() {
        const boxNumber = document.getElementById('boxNumber').value.trim();
        const emailAddress = document.getElementById('emailAddress').value.trim();

        if (!boxNumber) {
          showStatus('Please enter a box number', 'error');
          return;
        }

        toggleSpinner('emailSpinner', true);

        const recipient = emailAddress || 'your email';
        showStatus('Sending email for box ' + boxNumber + ' to ' + recipient + '...', 'info');

        google.script.run
          .withSuccessHandler(function(result) {
            toggleSpinner('emailSpinner', false);
            showStatus('Email sent successfully to ' + result.message.split('to ')[1], 'success');
          })
          .withFailureHandler(function(error) {
            toggleSpinner('emailSpinner', false);
            showStatus('Failed to send email: ' + error.message, 'error');
          })
          .emailBoxSummary(boxNumber, emailAddress || null);
      }
      
      // Generate all reports
      function generateAllReports() {
        if (!confirm('This will generate reports for all boxes. Continue?')) {
          return;
        }
        
        showStatus('Generating all reports... This may take a while.', 'info');
        
        google.script.run
          .withSuccessHandler(function(result) {
            const successCount = result.filter(function(r) { return r.status === 'success'; }).length;
            showStatus('Generated ' + successCount + ' of ' + result.length + ' reports!', 'success');
          })
          .withFailureHandler(function(error) {
            showStatus('Failed to generate reports: ' + error.message, 'error');
          })
          .generateAllBoxReports();
      }
      
      // Load thumbnails
      function loadThumbnails() {
        const grid = document.getElementById('thumbnailGrid');
        grid.innerHTML = '<div class="empty-state"><div class="empty-state-icon">üì∏</div><div>Loading images...</div></div>';
        
        google.script.run
          .withSuccessHandler(function(images) {
            if (images && images.length > 0) {
              let html = '';
              
              images.forEach(function(img) {
                html += '<div class="thumbnail-container" onclick="window.open(\'' + img.url + '\', \'_blank\')">';
                html += '<img class="thumbnail" src="' + img.url + '" alt="' + img.itemName + '" loading="lazy">';
                html += '<div class="thumbnail-overlay">';
                html += '<strong>' + img.itemName + '</strong><br>';
                html += 'Box: ' + img.boxNumber;
                html += '</div>';
                html += '</div>';
              });
              
              grid.innerHTML = html;
            } else {
              grid.innerHTML = '<div class="empty-state"><div class="empty-state-icon">üì∑</div><div>No images found yet.<br><small>Images will appear here after form submissions.</small></div></div>';
            }
          })
          .withFailureHandler(function(error) {
            console.error('Error loading thumbnails:', error);
            grid.innerHTML = '<div class="empty-state"><div class="empty-state-icon">‚ö†Ô∏è</div><div>Error loading images<br><small>' + error.message + '</small></div></div>';
          })
          .getRecentImages(12);
      }
      
      // Refresh data
      function refreshData() {
        showStatus('Refreshing data...', 'info');
        loadThumbnails();
        updateLastRefresh();
        
        setTimeout(function() {
          showStatus('Data refreshed!', 'success');
        }, 1000);
      }
      
      // Update last refresh time
      function updateLastRefresh() {
        const now = new Date();
        const timeStr = now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        document.getElementById('lastUpdate').textContent = timeStr;
      }
    </script>
  </body>
</html>